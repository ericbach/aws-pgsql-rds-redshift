Outputs:
  LambdaFunction:
    Description: Lambda function
    Value:
      Ref: GetLogicalChangesFunction
  LogsBucket:
    Description: Name of s3 bucket
    Value:
      Ref: LogsBucket
Parameters:
  AvailabilityZones:
    Description: 'List of Availability Zones to use for the subnets in the VPC. Note:
      The logical order is preserved.'
    Type: List<AWS::EC2::AvailabilityZone::Name>
  DatabaseHost:
    Description: The url of the database
    Type: String
  DatabaseMasterPassword:
    Description: The master password for the database
    NoEcho: true
    Type: String
  DatabaseMasterUsername:
    Description: The master username for the database
    Type: String
  DatabaseName:
    Description: The name of the database
    Type: String
  DatabasePort:
    AllowedPattern: ^[0-9]{1,5}$
    Default: '5432'
    Type: String
  DatabaseSG:
    Description: The security group of the AWS RDS instance.
    Type: AWS::EC2::SecurityGroup::Id
  LambdaSubnet0CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Description: CIDR block for lambda subnet 0 located in Availability Zone 0
    Type: String
  LogicalReplicationSlotName:
    AllowedPattern: ^([a-zA-Z0-9_]*)$
    ConstraintDescription: A combination of uppercase and lower case letters or numbers
      or underscore
    Default: test_slot
    Description: The name of the logical replication slot
    Type: String
  Vpc:
    AllowedPattern: ^(vpc-)([a-z0-9]{8}|[a-z0-9]{17})$
    Description: The Vpc Id of an existing Vpc.
    Type: AWS::EC2::VPC::Id
Resources:
  DatabaseSecurityGroupUpdate:
    Properties:
      FromPort:
        Ref: DatabasePort
      GroupId:
        Ref: DatabaseSG
      IpProtocol: tcp
      SourceSecurityGroupId:
        Ref: LambdaSecurityGroup
      ToPort:
        Ref: DatabasePort
    Type: AWS::EC2::SecurityGroupIngress
  EventPermision:
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: GetLogicalChangesFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
        - ScheduleEvent
        - Arn
    Type: AWS::Lambda::Permission
  GetLogicalChangesFunction:
    Properties:
      Code:
        S3Bucket: rds-redshift-434058760900-us-west-2
        S3Key: 8fa9cb5ddf9325f4d1ac8f8817aee7b9
      Environment:
        Variables:
          BUCKETNAME:
            Ref: LogsBucket
          PGDATABASE:
            Ref: DatabaseName
          PGHOST:
            Ref: DatabaseHost
          PGPASSWORD:
            Ref: DatabaseMasterPassword
          PGPORT:
            Ref: DatabasePort
          PGUSER:
            Ref: DatabaseMasterUsername
          SlotName:
            Ref: LogicalReplicationSlotName
      Handler: index.handler
      MemorySize: 512
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Runtime: nodejs8.10
      Timeout: 10
      VpcConfig:
        SecurityGroupIds:
        - Ref: LambdaSecurityGroup
        SubnetIds:
        - Ref: LambdaSubnet0
    Type: AWS::Lambda::Function
  LambdaExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - arn:aws:iam::aws:policy/AmazonS3FullAccess
      - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
    Type: AWS::IAM::Role
  LambdaRouteTable:
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - 'LambdaRouteTable / '
            - Ref: AWS::StackName
      - Key: Network
        Value: Public
      VpcId:
        Ref: Vpc
    Type: AWS::EC2::RouteTable
  LambdaRouteTableAssociation0:
    Properties:
      RouteTableId:
        Ref: LambdaRouteTable
      SubnetId:
        Ref: LambdaSubnet0
    Type: AWS::EC2::SubnetRouteTableAssociation
  LambdaSecurityGroup:
    Properties:
      GroupDescription: Allow lambda functions to access AWS RDS database
      SecurityGroupEgress:
      - DestinationSecurityGroupId:
          Ref: DatabaseSG
        FromPort:
          Ref: DatabasePort
        IpProtocol: tcp
        ToPort:
          Ref: DatabasePort
      - CidrIp: 0.0.0.0/0
        FromPort: 443
        IpProtocol: tcp
        ToPort: 443
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - Ref: AWS::StackName
            - -lambda
      VpcId:
        Ref: Vpc
    Type: AWS::EC2::SecurityGroup
  LambdaSubnet0:
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 0
        - Ref: AvailabilityZones
      CidrBlock:
        Ref: LambdaSubnet0CIDR
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - 'LambdaSubnet0 / '
            - Ref: AWS::StackName
      - Key: SubnetType
        Value: Private
      VpcId:
        Ref: Vpc
    Type: AWS::EC2::Subnet
  LogsBucket:
    DeletionPolicy: Retain
    Type: AWS::S3::Bucket
  S3Endpoint:
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - s3:*
          Effect: Allow
          Principal: '*'
          Resource:
          - Fn::Sub: arn:aws:s3:::${LogsBucket}
          - Fn::Sub: arn:aws:s3:::${LogsBucket}/*
          - arn:aws:s3:::*
        Version: '2012-10-17'
      RouteTableIds:
      - Ref: LambdaRouteTable
      ServiceName:
        Fn::Join:
        - ''
        - - com.amazonaws.
          - Ref: AWS::Region
          - .s3
      VpcId:
        Ref: Vpc
    Type: AWS::EC2::VPCEndpoint
  ScheduleEvent:
    Properties:
      Description: Cloudwatch event to trigger lambda every 5 minutes
      ScheduleExpression: rate(5 minutes)
      State: ENABLED
      Targets:
      - Arn:
          Fn::GetAtt:
          - GetLogicalChangesFunction
          - Arn
        Id: check-logical-changes
        Input:
          Fn::Sub: '{ "slot_name": "${LogicalReplicationSlotName}" }'
    Type: AWS::Events::Rule
